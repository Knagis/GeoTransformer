/*
 * This file is part of GeoTransformer project (http://geotransformer.codeplex.com/).
 * It is licensed under Microsoft Reciprocal License (Ms-RL).
 */
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.ComponentModel;

namespace GeoTransformer.UI
{
    /// <summary>
    /// Wrapper for the <see cref="ToolTip"/> control that allows the user interface controls generated by transformers to reuse a single
    /// <c>ToolTip</c> on the main form.
    /// </summary>
    [ProvideProperty("ToolTip", typeof(Control))]
    public class SingletonTooltip : Component, IExtenderProvider
    {
        private static Dictionary<Control, string> TemporaryCache = new Dictionary<Control, string>();
        private static ToolTip _targetToolTip;
        private static object SyncRoot = new object();

        /// <summary>
        /// Sets the actual <see cref="ToolTip"/> object that will display the popups.
        /// </summary>
        internal static void SetRealToolTip(ToolTip toolTip)
        {
            if (_targetToolTip == null)
                lock (SyncRoot)
                    if (_targetToolTip == null)
                    {
                        foreach (var x in TemporaryCache)
                        {
                            toolTip.SetToolTip(x.Key, x.Value);
                        }
                        _targetToolTip = toolTip;
                        return;
                    }

            throw new InvalidOperationException("The method cannot be called twice.");
        }

        /// <summary>
        /// Specifies whether this object can provide its extender properties to the specified object.
        /// </summary>
        /// <param name="extendee">The <see cref="T:System.Object"/> to receive the extender properties.</param>
        /// <returns>
        /// true if this object can provide extender properties to the specified object; otherwise, false.
        /// </returns>
        public bool CanExtend(object extendee)
        {
            return extendee is Control && !(extendee is ToolTip);
        }

        [DefaultValue(""), Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor)), Localizable(true)]
        public string GetToolTip(Control control)
        {
            if (_targetToolTip == null)
                lock (SyncRoot)
                    if (_targetToolTip == null)
                        return TemporaryCache.ContainsKey(control) ? TemporaryCache[control] : string.Empty;

            return _targetToolTip.GetToolTip(control);
        }

        public void SetToolTip(Control control, string caption)
        {
            if (_targetToolTip == null)
                lock (SyncRoot)
                    if (_targetToolTip == null)
                    {
                        TemporaryCache[control] = caption;
                        return;
                    }

            _targetToolTip.SetToolTip(control, caption);
        }
    }
}
